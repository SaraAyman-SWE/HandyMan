// <auto-generated />
using System;
using HandyMan.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HandyMan.Migrations
{
    [DbContext(typeof(Handyman_DBContext))]
    partial class Handyman_DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Handyman_Region", b =>
                {
                    b.Property<int>("Handyman_SSN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Region_ID")
                        .HasColumnType("int");

                    b.HasKey("Handyman_SSN", "Region_ID");

                    b.HasIndex("Region_ID");

                    b.ToTable("Handyman_Region", (string)null);
                });

            modelBuilder.Entity("HandyMan.Models.Client", b =>
                {
                    b.Property<int>("Client_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Client_ID"), 1L, 1);

                    b.Property<string>("Client_Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Client_Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Client_Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Client_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Region_ID")
                        .HasColumnType("int");

                    b.HasKey("Client_ID");

                    b.HasIndex("Client_Email")
                        .IsUnique();

                    b.HasIndex("Region_ID");

                    b.HasIndex(new[] { "Client_Mobile" }, "UQ__Client__409D25A0AB59A5F9")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("HandyMan.Models.Craft", b =>
                {
                    b.Property<int>("Craft_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Craft_ID"), 1L, 1);

                    b.Property<string>("Craft_Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Craft_ID")
                        .HasName("PK__Craft__D37F5DD90F011EA7");

                    b.ToTable("Craft");
                });

            modelBuilder.Entity("HandyMan.Models.Handyman", b =>
                {
                    b.Property<int>("Handyman_SSN")
                        .HasColumnType("int");

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("CraftID")
                        .HasColumnType("int");

                    b.Property<string>("Handyman_Criminal_Record")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Handyman_Fixed_Rate")
                        .HasColumnType("int");

                    b.Property<string>("Handyman_ID_Image")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Handyman_Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Handyman_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Handyman_Photo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("Open_For_Work")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Handyman_SSN")
                        .HasName("PK__Handyman__9C5E1C4351B08EA4");

                    b.HasIndex("CraftID");

                    b.HasIndex(new[] { "Handyman_Mobile" }, "UQ__Handyman__F297F34DD98DA7CB")
                        .IsUnique();

                    b.ToTable("Handyman");
                });

            modelBuilder.Entity("HandyMan.Models.Payment", b =>
                {
                    b.Property<int>("Payment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Payment_ID"), 1L, 1);

                    b.Property<int>("Request_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Method")
                        .HasColumnType("bit");

                    b.Property<int>("Payment_Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Payment_Date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Payment_Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Transaction_ID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Payment_ID", "Request_ID");

                    b.HasIndex("Request_ID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("HandyMan.Models.Region", b =>
                {
                    b.Property<int>("Region_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Region_ID"), 1L, 1);

                    b.Property<string>("Region_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Region_ID")
                        .HasName("PK__Region__A9EAD51FEE4C6713");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("HandyMan.Models.Request", b =>
                {
                    b.Property<int>("Request_ID")
                        .HasColumnType("int");

                    b.Property<int>("Client_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Client_Rate")
                        .HasColumnType("int");

                    b.Property<string>("Client_Review")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Handy_Rate")
                        .HasColumnType("int");

                    b.Property<string>("Handy_Review")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Handyman_SSN")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Request_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Request_Order_Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Request_Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Request_ID");

                    b.HasIndex("Client_ID");

                    b.HasIndex("Handyman_SSN");

                    b.HasIndex(new[] { "Request_ID" }, "UQ__Request__E9C5B292D224AFDB")
                        .IsUnique();

                    b.ToTable("Request");
                });

            modelBuilder.Entity("HandyMan.Models.Schedule", b =>
                {
                    b.Property<int>("Handy_SSN")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time_From")
                        .HasColumnType("time");

                    b.Property<DateTime>("Schedule_Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("Time_To")
                        .HasColumnType("time");

                    b.HasKey("Handy_SSN", "Time_From", "Schedule_Date")
                        .HasName("PK__Schedule__79B9CA37213B802B");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("HandyMan.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HandymanRegion", b =>
                {
                    b.Property<int>("Handyman_SSN")
                        .HasColumnType("int");

                    b.Property<int>("Region_ID")
                        .HasColumnType("int");

                    b.HasKey("Handyman_SSN", "Region_ID");

                    b.ToTable("HandymanRegion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Handyman_Region", b =>
                {
                    b.HasOne("HandyMan.Models.Handyman", null)
                        .WithMany()
                        .HasForeignKey("Handyman_SSN")
                        .IsRequired()
                        .HasConstraintName("FK_Handyman_Region_Handyman");

                    b.HasOne("HandyMan.Models.Region", null)
                        .WithMany()
                        .HasForeignKey("Region_ID")
                        .IsRequired()
                        .HasConstraintName("FK_Handyman_Region_Region");
                });

            modelBuilder.Entity("HandyMan.Models.Client", b =>
                {
                    b.HasOne("HandyMan.Models.Region", "Region")
                        .WithMany("Clients")
                        .HasForeignKey("Region_ID")
                        .IsRequired()
                        .HasConstraintName("FK_Client_Region");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("HandyMan.Models.Handyman", b =>
                {
                    b.HasOne("HandyMan.Models.Craft", "Craft")
                        .WithMany("Handymen")
                        .HasForeignKey("CraftID")
                        .IsRequired()
                        .HasConstraintName("FK_Handyman_Craft");

                    b.Navigation("Craft");
                });

            modelBuilder.Entity("HandyMan.Models.Payment", b =>
                {
                    b.HasOne("HandyMan.Models.Request", "Request")
                        .WithMany("Payments")
                        .HasForeignKey("Request_ID")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("HandyMan.Models.Request", b =>
                {
                    b.HasOne("HandyMan.Models.Client", "Client")
                        .WithMany("Requests")
                        .HasForeignKey("Client_ID")
                        .IsRequired()
                        .HasConstraintName("FK_Request_Client");

                    b.HasOne("HandyMan.Models.Handyman", "Handyman_SSNNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("Handyman_SSN")
                        .IsRequired()
                        .HasConstraintName("FK_Request_Handyman");

                    b.Navigation("Client");

                    b.Navigation("Handyman_SSNNavigation");
                });

            modelBuilder.Entity("HandyMan.Models.Schedule", b =>
                {
                    b.HasOne("HandyMan.Models.Handyman", "Handy_SSNNavigation")
                        .WithMany("Schedules")
                        .HasForeignKey("Handy_SSN")
                        .IsRequired()
                        .HasConstraintName("FK__Schedule__Handy___4BAC3F29");

                    b.Navigation("Handy_SSNNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HandyMan.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HandyMan.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandyMan.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HandyMan.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandyMan.Models.Client", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("HandyMan.Models.Craft", b =>
                {
                    b.Navigation("Handymen");
                });

            modelBuilder.Entity("HandyMan.Models.Handyman", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("HandyMan.Models.Region", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("HandyMan.Models.Request", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
